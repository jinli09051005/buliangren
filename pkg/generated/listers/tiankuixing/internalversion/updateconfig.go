/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	tiankuixing "cangbinggu.io/buliangren/pkg/apis/tiankuixing"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpdateConfigLister helps list UpdateConfigs.
// All objects returned here must be treated as read-only.
type UpdateConfigLister interface {
	// List lists all UpdateConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tiankuixing.UpdateConfig, err error)
	// UpdateConfigs returns an object that can list and get UpdateConfigs.
	UpdateConfigs(namespace string) UpdateConfigNamespaceLister
	UpdateConfigListerExpansion
}

// updateConfigLister implements the UpdateConfigLister interface.
type updateConfigLister struct {
	indexer cache.Indexer
}

// NewUpdateConfigLister returns a new UpdateConfigLister.
func NewUpdateConfigLister(indexer cache.Indexer) UpdateConfigLister {
	return &updateConfigLister{indexer: indexer}
}

// List lists all UpdateConfigs in the indexer.
func (s *updateConfigLister) List(selector labels.Selector) (ret []*tiankuixing.UpdateConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tiankuixing.UpdateConfig))
	})
	return ret, err
}

// UpdateConfigs returns an object that can list and get UpdateConfigs.
func (s *updateConfigLister) UpdateConfigs(namespace string) UpdateConfigNamespaceLister {
	return updateConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpdateConfigNamespaceLister helps list and get UpdateConfigs.
// All objects returned here must be treated as read-only.
type UpdateConfigNamespaceLister interface {
	// List lists all UpdateConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tiankuixing.UpdateConfig, err error)
	// Get retrieves the UpdateConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*tiankuixing.UpdateConfig, error)
	UpdateConfigNamespaceListerExpansion
}

// updateConfigNamespaceLister implements the UpdateConfigNamespaceLister
// interface.
type updateConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpdateConfigs in the indexer for a given namespace.
func (s updateConfigNamespaceLister) List(selector labels.Selector) (ret []*tiankuixing.UpdateConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*tiankuixing.UpdateConfig))
	})
	return ret, err
}

// Get retrieves the UpdateConfig from the indexer for a given namespace and name.
func (s updateConfigNamespaceLister) Get(name string) (*tiankuixing.UpdateConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tiankuixing.Resource("updateconfig"), name)
	}
	return obj.(*tiankuixing.UpdateConfig), nil
}
